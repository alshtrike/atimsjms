
**** **** **** **** GlassHouseConfig.startup **** **** **** ****

**** GlassHouseConfig.startup.ConfigureAuth

            // Uncomment the following lines to enable logging in with third party login providers
            //app.UseMicrosoftAccountAuthentication(
            //    clientId: "",
            //    clientSecret: "");

            //app.UseTwitterAuthentication(
            //   consumerKey: "",
            //   consumerSecret: "");

            //app.UseFacebookAuthentication(
            //   appId: "",
            //   appSecret: "");

            //app.UseGoogleAuthentication(new GoogleOAuth2AuthenticationOptions()
            //{
            //    ClientId = "",
            //    ClientSecret = ""
            //});



**** **** **** **** GlassHouseConfig.GlassHouseUserManager **** **** **** ****

**** GlassHouseConfig.GlassHouseUserManager
  
        // @TODO: Make Modular
        public static void addTwoFactorProviders( GlassHouseUserManager manager ){
            
            /*~* /
            // Default Two-Factor Authentication Providers (See related classes EmailService and SmsService)
            manager.RegisterTwoFactorProvider("PhoneCode", new PhoneNumberTokenProvider<GlassHouseUser>{
                MessageFormat = "Your security code is: {0}"
            } );
            
            manager.SmsService = new SmsService( );
             
            manager.RegisterTwoFactorProvider("EmailCode", new EmailTokenProvider<GlassHouseUser>{
                Subject = "GlassHouse Security Code",
                BodyFormat = "Your security code is: {0}"
            } );
            
            manager.EmailService = new EmailService( );
            /*~*/

        }

**** GlassHouseConfig.GlassHouseUserManager.create
			
            // Two-Factor token authentication
            addTwoFactorProviders( manager );

**** GlassHouseConfig // For GlassHouseUserManager
		
    // Default Two-Factor Authentication Providers (See related function addTwoFactorProviders)
    public class EmailService: IIdentityMessageService{

        public Task SendAsync( IdentityMessage message ){
            // Plug in your email service here to send an email.
            return Task.FromResult( 0 );
        }

    }

    public class SmsService: IIdentityMessageService{

        public Task SendAsync( IdentityMessage message ){
            // Plug in your sms service here to send a text message.
            return Task.FromResult( 0 );
        }

    }